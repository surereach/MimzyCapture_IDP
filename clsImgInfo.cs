using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ImageInfoJson
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using ImageInfoJson;
    //
    //    var oImgInfo = clsImgInfo.FromJson(jsonString);

    public partial class clsImgInfo
    {
        [JsonProperty("imageInfo")]
        public ImageInfo ImageInfo { get; set; }

        [JsonProperty("extendedImageInfo")]
        public ExtendedImageInfo ExtendedImageInfo { get; set; }
    }

    public partial class ExtendedImageInfo
    {
        [JsonProperty("barcode")]
        public object[] Barcode { get; set; }

        [JsonProperty("others")]
        public Others Others { get; set; }
    }

    public partial class Others
    {
        [JsonProperty("TWEI_PIXELFLAVOR")]
        public long TweiPixelflavor { get; set; }

        [JsonProperty("TWEI_DOCUMENTNUMBER")]
        public long TweiDocumentnumber { get; set; }

        [JsonProperty("TWEI_PAGENUMBER")]
        public long TweiPagenumber { get; set; }

        [JsonProperty("TWEI_PAGESIDE")]
        public long TweiPageside { get; set; }

        [JsonProperty("TWEI_CAMERA")]
        public TweiCamera TweiCamera { get; set; }

        [JsonProperty("TWEI_FRAMENUMBER")]
        public long TweiFramenumber { get; set; }

        [JsonProperty("TWEI_FRAME")]
        public double[] TweiFrame { get; set; }

        [JsonProperty("TWEI_BARCODECOUNT")]
        public long TweiBarcodecount { get; set; }
    }

    public partial class TweiCamera
    {
        [JsonProperty("BINARY")]
        public bool Binary { get; set; }

        [JsonProperty("Error")]
        public bool Error { get; set; }

        [JsonProperty("VALUE")]
        public string Value { get; set; }
    }

    public partial class ImageInfo
    {
        [JsonProperty("XResolution")]
        public long XResolution { get; set; }

        [JsonProperty("YResolution")]
        public long YResolution { get; set; }

        [JsonProperty("ImageWidth")]
        public long ImageWidth { get; set; }

        [JsonProperty("ImageLength")]
        public long ImageLength { get; set; }

        [JsonProperty("BitsPerPixel")]
        public long BitsPerPixel { get; set; }

        [JsonProperty("SamplesPerPixel")]
        public long SamplesPerPixel { get; set; }

        [JsonProperty("BitsPerSample")]
        public long[] BitsPerSample { get; set; }

        [JsonProperty("Planar")]
        public bool Planar { get; set; }

        [JsonProperty("PixelType")]
        public long PixelType { get; set; }

        [JsonProperty("Compression")]
        public long Compression { get; set; }

        [JsonProperty("ImageLayout")]
        public ImageLayout ImageLayout { get; set; }
    }

    public partial class ImageLayout
    {
        [JsonProperty("Frame")]
        public Frame Frame { get; set; }

        [JsonProperty("DocumentNumber")]
        public long DocumentNumber { get; set; }

        [JsonProperty("PageNumber")]
        public long PageNumber { get; set; }

        [JsonProperty("FrameNumber")]
        public long FrameNumber { get; set; }
    }

    public partial class Frame
    {
        [JsonProperty("Left")]
        public long Left { get; set; }

        [JsonProperty("Top")]
        public long Top { get; set; }

        [JsonProperty("Right")]
        public double Right { get; set; }

        [JsonProperty("Bottom")]
        public double Bottom { get; set; }
    }

    public partial class clsImgInfo
    {
        public static clsImgInfo FromJson(string json) => JsonConvert.DeserializeObject<clsImgInfo>(json, ImageInfoJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this clsImgInfo self) => JsonConvert.SerializeObject(self, ImageInfoJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeFormat = "yyyy-MM-ddTHH:mm:ss.fff" }
            },
        };
    }


}
